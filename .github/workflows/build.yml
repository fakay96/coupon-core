name: Build Docker Images

on:
  workflow_call:
    inputs:
      tag:
        description: 'The commit SHA to use as a tag (use "latest" to tag as latest)'
        required: false
        type: string
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true

jobs:
  build:
    runs-on: self-hosted
    outputs:
      version_tag: ${{ steps.get_version.outputs.version_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version information
        id: get_version
        run: |
          if [ -n "${{ inputs.tag }}" ]; then
            TAG=${{ inputs.tag }}
          else
            TAG=$(date +%Y%m%d)-$(echo "${GITHUB_SHA}" | cut -c1-7)
          fi

          # Use "latest" tag if it is explicitly provided
          if [ "$TAG" = "latest" ]; then
            echo "Using 'latest' tag for Docker images."
          else
            echo "Using generated version tag: $TAG"
          fi

          echo "VERSION_TAG=${TAG}" >> "$GITHUB_ENV"
          echo "version_tag=${TAG}" >> "$GITHUB_OUTPUT"

      - name: Debug version tag
        run: 'echo "Generated version tag is: ${{ env.VERSION_TAG }}"'

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push the backend image
        env:
          VERSION_TAG: ${{ env.VERSION_TAG }}
        run: |
          docker build -t fakay96/backend:${VERSION_TAG} --push -f docker/Dockerfile.backend .

      - name: Prune Docker resources after backend build
        run: |
          docker system prune --force --volumes

      - name: Build and push the web scraper image
        env:
          VERSION_TAG: ${{ env.VERSION_TAG }}
        run: |
          docker build -t fakay96/web_scraper:${VERSION_TAG} --push -f docker/Dockerfile.web_scraper .

      - name: Prune Docker resources after web scraper build
        run: |
          docker system prune --force --volumes

      - name: Save version tag to file
        run: echo "${{ env.VERSION_TAG }}" > version.txt

      - name: Upload version file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: version-file
          path: version.txt
