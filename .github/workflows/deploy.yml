name: Deploy to DigitalOcean Kubernetes

on:
  workflow_call:
    inputs:
      version_tag:
        description: 'The version tag to deploy'
        required: true
        type: string
    secrets:
      KUBECONFIG_CONTENT:
        required: true
      KUBERNETES_SECRETS:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Download the artifact with the version tag
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: version-file

      # Step 3: Read the version tag from artifact and set it as an environment variable
      - name: Read version from artifact
        id: read_version
        run: |
          VERSION_TAG=$(cat version.txt)
          echo "VERSION_TAG=${VERSION_TAG}"
          echo "version_tag=${VERSION_TAG}" >> $GITHUB_ENV

      # Step 4: Configure kubectl for DigitalOcean
      - name: Configure kubectl for DigitalOcean
        run: |
          mkdir -p ~/.kube
          echo "Creating kubeconfig from raw YAML content..."
          echo "${{ secrets.KUBECONFIG_CONTENT }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      # Step 5: Verify kubeconfig setup
      - name: Verify kubeconfig file and access
        run: kubectl get nodes

      # Step 6: Decode and apply Kubernetes secrets
      - name: Apply Kubernetes secrets
        run: |
          echo "Applying Kubernetes secrets..."
          echo "${{ secrets.KUBERNETES_SECRETS }}" > secrets.yaml
          kubectl apply -f secrets.yaml --namespace production

      # Step 7: Debug version tag
      - name: Debug version tag
        run: 'echo "The version tag being used for deployment is: ${version_tag}"'

      # Step 8: Deploy backend service with Helm
      - name: Deploy backend service with Helm
        env:
          VERSION_TAG: ${{ env.VERSION_TAG }}
        run: |
          echo "Deploying with Helm using image tag: ${version_tag}"
          helm upgrade --install backend-service ./k8s/backend \
            --set backend.image.repository=fakay96/backend \
            --set backend.image.tag=${version_tag} \
            --namespace production --create-namespace \
            -f ./k8s/backend/values/production-values.yaml \
            --history-max 10

  

      # Step 12: Verify service endpoints (optional)
      - name: Verify service endpoints
        run: |
          echo "Verifying if service endpoints are available..."
          kubectl get endpoints backend-service -n production

      # Step 13: Debug pod logs on failure (optional)
      - name: Debug pod logs on failure
        if: failure()
        run: |
          echo "Fetching logs from backend pods for debugging..."
          kubectl logs -l app=backend -n production --tail=50

      # Step 14: Scale down deployment instead of uninstalling (best practice)
      - name: Scale down deployment on failure
        if: failure()
        run: |
          echo "Scaling down the deployment to 0 replicas to minimize resource usage..."
          kubectl scale deployment backend --replicas=0 -n production

      # Step 15: Rollback to previous version
      - name: Rollback to previous version on failure
        if: failure()
        run: |
          echo "Deployment failed. Rolling back to previous version."
          helm rollback backend-service 1 --namespace production
