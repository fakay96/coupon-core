"""
Client IP Middleware

This middleware extracts the client's IP address from the incoming request and attaches it
to the `request` object as `client_ip`. It ensures that the IP address is globally available
for use across all views in the Django project.

The middleware prioritizes the `X-Forwarded-For` header to fetch the original client IP if the
request passes through a proxy. If the header is unavailable, it falls back to the `REMOTE_ADDR`
field.


"""

from typing import Callable

from django.http import HttpRequest, HttpResponse


class ClientIPMiddleware:
    """
    Middleware to extract the client's IP address and attach it to the request object.
    This middleware ensures the IP is globally available for all views.

    Attributes:
        get_response (Callable): The next middleware or view in the request chain.

    Methods:
        __call__(request: HttpRequest) -> HttpResponse:
            Processes the incoming request, extracts the client's IP address, and
            attaches it to the request object.
    """

    def __init__(self, get_response: Callable) -> None:
        """
        Initializes the middleware with the next middleware or view in the chain.

        Args:
            get_response (Callable): The next middleware or view to process the request.
        """
        self.get_response = get_response

    def __call__(self, request: HttpRequest) -> HttpResponse:
        """
        Processes the incoming request, extracts the client's IP address, and
        attaches it to the request object.

        The middleware prioritizes the `X-Forwarded-For` header to fetch the original
        client IP if the request passes through a proxy. If the header is unavailable,
        it falls back to the `REMOTE_ADDR` field.

        Args:
            request (HttpRequest): The incoming HTTP request.

        Returns:
            HttpResponse: The HTTP response generated by the next middleware or view.
        """
        # Extract the IP address
        x_forwarded_for = request.META.get("HTTP_X_FORWARDED_FOR")
        if x_forwarded_for:
            ip = x_forwarded_for.split(",")[0]  # First IP in the chain
        else:
            ip = request.META.get("REMOTE_ADDR")  # Direct IP address

        # Attach the IP to the request object
        request.client_ip = ip

        # Pass the request to the next middleware or view
        response = self.get_response(request)
        return response
