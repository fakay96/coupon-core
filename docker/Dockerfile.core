# syntax=docker/dockerfile:1

# ARG TARGETPLATFORM is automatically defined by buildx
ARG TARGETPLATFORM
ARG VARIANT=slim

FROM python:3.12-${VARIANT} AS builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/root/.local/bin:$PATH" \
    POETRY_VIRTUALENVS_CREATE=false

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    postgresql-client \
    curl \
    python3-pip \
    netcat-traditional && \  
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Install Poetry (recommended method)
RUN curl -sSL https://install.python-poetry.org | python3 - && \
    ln -s /root/.local/bin/poetry /usr/local/bin/poetry

# Set working directory
WORKDIR /app

# Copy dependency files
COPY pyproject.toml poetry.lock ./

# Install dependencies
RUN poetry install --no-root --no-interaction --no-ansi

# Copy application source code
COPY coupon_core/ coupon_core/
COPY authentication/ authentication/
COPY geodiscounts/ geodiscounts/
COPY manage.py .

# --- Final Stage ---
FROM python:3.12-${VARIANT}

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    postgresql-client \
    netcat-traditional && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Copy Poetry binary from builder
COPY --from=builder /root/.local /root/.local

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/root/.local/bin:$PATH" \
    POETRY_VIRTUALENVS_CREATE=false

# Set working directory
WORKDIR /app

# Copy application from builder
COPY --from=builder /app /app

# Expose the application port
EXPOSE 8000

# Add the entrypoint script
COPY Scripts/entryfile_backend.sh /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh

# Set entrypoint
ENTRYPOINT ["/app/entrypoint.sh"]
